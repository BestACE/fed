<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>BOM详解 - By 交互开发课题组</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.colors.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>BOM详解</h1>
<h2>演讲者：交互开发课题组</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>内容提纲</h2>
<ol>
<li>浏览器环境概述</li>
<li>window对象</li>
<li>history对象</li>
<li>Cookie和Web Storage</li>
<li>案例练习</li>
</ol>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>浏览器环境概述</h2>
<ul>
<li>参考资料<ul>
<li><a href="http://javascript.ruanyifeng.com/bom/engine.html" target="_blank">浏览器环境概述</a></li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>JS嵌入网页的方法</h2>
<ul>
<li><code>&lt;script&gt;</code>标签：代码嵌入网页</li>
<li><code>&lt;script&gt;</code>标签：加载外部脚本</li>
<li>事件属性：代码写入HTML元素的事件处理属性，比如onclick或者onmouseover</li>
<li>URL协议：URL支持以javascript:协议的方式，执行JavaScript代码</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>网页加载流程</h2>
<ul>
<li>浏览器一边下载HTML网页，一边开始解析</li>
<li>解析过程中，发现<code>&lt;script&gt;</code>标签</li>
<li>暂停解析，网页渲染的控制权转交给JavaScript引擎</li>
<li>如果<code>&lt;script&gt;</code>标签引用了外部脚本，就下载该脚本，否则就直接执行</li>
<li>执行完毕，控制权交还渲染引擎，恢复往下解析HTML网页</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>阻塞效应</h2>
<ul>
<li>如果外部脚本加载时间很长（比如一直无法完成下载），就会造成网页长时间失去响应，浏览器就会呈现“假死”状态，这被称为“阻塞效应”。</li>
<li>为了避免这种情况，较好的做法是将<code>&lt;script&gt;</code>标签都放在页面底部。这样即使遇到脚本失去响应，网页主体的渲染也已经完成了，用户至少可以看到内容，而不是面对一张空白的页面。</li>
<li>如果某些脚本代码非常重要，一定要放在页面头部的话，最好直接将代码嵌入页面，而不是连接外部脚本文件，这样能缩短加载时间。</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>动态加载脚本</h2>
<pre><code class="javascript">[&#39;a.js&#39;, &#39;b.js&#39;].forEach(function(src) {
  var script = document.createElement(&#39;script&#39;);
  script.src = src;
  script.async = false;
  document.head.appendChild(script);
});
//or
(function() {
  var scripts = document.getElementsByTagName(&#39;script&#39;)[0];
  function load(url) {
    var script = document.createElement(&#39;script&#39;);
    script.async = true;
    script.src = url;
    scripts.parentNode.insertBefore(script, scripts);
  }
  load(&#39;//apis.google.com/js/plusone.js&#39;);
  load(&#39;//platform.twitter.com/widgets.js&#39;);
  load(&#39;//s.thirdpartywidget.com/widget.js&#39;);
}());
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>渲染引擎</h2>
<ul>
<li>渲染引擎</li>
<li>重流和重绘</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>window对象</h2>
<ul>
<li>在浏览器中，window对象指当前的浏览器窗口, 也是所有对象的顶层对象。</li>
<li>JavaScript规定，浏览器环境的所有全局变量，都是window对象的属性。</li>
<li>window对象属性</li>
<li>window对象方法</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>window对象属性</h2>
<ul>
<li>window.location 返回一个location对象，用于获取窗口当前的URL信息</li>
<li>window.frames 返回一个类似数组的对象，成员为页面内所有框架窗口，包括frame元素和iframe元素。</li>
<li>window.innerWidth 返回当前窗口中可见部分的宽度</li>
<li>window.outerWidth 返回浏览器窗口的宽度，包括浏览器菜单和边框</li>
<li>window.screenX 返回浏览器窗口左上角相对于当前屏幕左上角的水平距离</li>
<li>window.pageXOffset 返回页面的水平滚动距离</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>window对象属性</h2>
<ul>
<li>window.moveTo() 移动浏览器窗口到指定位置</li>
<li>window.moveBy() 将窗口移动到一个相对位置</li>
<li>window.scrollTo() 将网页的指定位置，滚动到浏览器左上角</li>
<li>window.scrollBy() 将网页移动指定距离</li>
<li>window.open() 新建浏览器窗口</li>
<li>window.close() 关闭窗口</li>
<li>window.print() 调出打印菜单</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>navigator对象</h2>
<ul>
<li>window对象的navigator属性，指向一个包含浏览器信息的对象。</li>
<li>navigator属性</li>
<li>navigator方法</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>history对象</h2>
<ul>
<li>浏览器窗口有一个history对象，用来保存浏览历史。</li>
<li>history属性<ul>
<li>length</li>
</ul>
</li>
<li>history方法<ul>
<li>back()：移动到上一个访问页面，等同于浏览器的后退键。</li>
<li>forward()：移动到下一个访问页面，等同于浏览器的前进键。</li>
<li>go()：接受一个整数作为参数，移动到该整数指定的页面，比如go(1)相当于forward()，go(-1)相当于back()。</li>
<li>history.pushState() 用来在浏览历史中添加记录</li>
<li>history.replaceState() 修改浏览历史中当前纪录</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>URLSearchParams API</h2>
<ul>
<li>has()：返回一个布尔值，表示是否具有某个参数</li>
<li>get()：返回指定参数的第一个值</li>
<li>getAll()：返回一个数组，成员是指定参数的所有值</li>
<li>set()：设置指定参数</li>
<li>delete()：删除指定参数</li>
<li>append()：在查询字符串之中，追加一个键值对</li>
<li>toString()：返回整个查询字符串</li>
<li>keys()：遍历所有参数名</li>
<li>values()：遍历所有参数值</li>
<li>entries()：遍历所有参数的键值对</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>Cookie</h2>
<ul>
<li>服务器保存在浏览器的一小段文本信息</li>
</ul>
<pre><code class="javascript">//JS操作cookies方法!  

//写cookies  
function setCookie(c_name, value, expiredays){  
    var exdate=new Date();  
    exdate.setDate(exdate.getDate() + expiredays);  
    document.cookie=c_name+ &quot;=&quot; + escape(value) + ((expiredays==null) ? &quot;&quot; : &quot;;expires=&quot;+exdate.toGMTString());  
}  

//读取cookies  
function getCookie(name)  
{  
    var arr,reg=new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;);  
    if(arr=document.cookie.match(reg))  
        return (arr[2]);  
    else  
        return null;  
}  

//删除cookies  
function delCookie(name)  
{  
    var exp = new Date();  
    exp.setTime(exp.getTime() - 1);  
    var cval=getCookie(name);  
    if(cval!=null)  
        document.cookie= name + &quot;=&quot;+cval+&quot;;expires=&quot;+exp.toGMTString();  
}  
//使用示例  
setCookie(&#39;username&#39;,&#39;Darren&#39;,30)   
alert(getCookie(&quot;username&quot;));
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>Web Storage</h2>
<ul>
<li>浏览器端数据储存机制<ul>
<li>sessionStorage 保存的数据用于浏览器的一次会话，当会话结束（通常是该窗口关闭），数据被清空。</li>
<li>localStorage 保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。</li>
</ul>
</li>
<li>操作方法<ul>
<li>存入/读取数据</li>
<li>清除数据</li>
<li>遍历操作</li>
</ul>
</li>
<li>storage事件</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2><a href="https://codepen.io/whqet/pen/RjdVQj?editors=1000" target="_blank">案例练习</a></h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>交互开发</h1>
<h2>旨为前端开发工程师的前端开发课程</h2>
<p><small style="vertical-align:middle;display:inline-block"><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=star&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=follow&count=false" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="20" style="width:170px;height:20px;  background-color: transparent;"></iframe></small></p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'rollIn',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./style/01.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
