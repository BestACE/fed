<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>面向对象编程 - By 交互开发课题组</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.colors.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>面向对象编程</h1>
<h2>演讲者：交互开发课题组</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>内容提纲</h2>
<ol>
<li>概念解析</li>
<li>创建对象</li>
<li>属性操作</li>
<li>继承实现</li>
<li>案例实现</li>
</ol>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>概念解析</h2>
<ul>
<li>类和对象<ul>
<li>面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</li>
<li>每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。</li>
<li>面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发。</li>
</ul>
</li>
<li>常见对象<ul>
<li>内置对象：由ECMAScript规范定义的对象，如数组、函数、日期等</li>
<li>宿主对象：由JS所嵌入环境（web浏览器等）定义的对象，如window对象等</li>
<li>自定义对象： 由运行中的JS代码所定义的对象。</li>
</ul>
</li>
<li>参考资料<ul>
<li><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank">Javascript面向对象编程（一）：封装</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank">Javascript面向对象编程（二）：构造函数的继承</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank">Javascript面向对象编程（三）：非构造函数的继承</a></li>
<li><a href="http://javascript.ruanyifeng.com/#toc3" target="_blank">面向对象编程</a></li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>创建对象</h2>
<ul>
<li>对象直接量</li>
<li>通过new创建对象</li>
<li>构造函数和原型</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>对象直接量-创建对象</h2>
<ul>
<li>对象直接量</li>
</ul>
<pre><code class="javascript">//对象直接量创建对象
var book={
    name:&quot;javascript入门&quot;,
    category:&quot;fed&quot;,
    author:{
        name:&quot;whqet&quot;,
        age:18
    }
};
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>通过new创建对象-创建对象</h2>
<ul>
<li>通过new创建对象</li>
</ul>
<pre><code class="javascript">//通过new创建对象
var book=new Object();
book.name=&quot;javascript入门&quot;;
book.category=&quot;fed&quot;;
book.saleNo=0;
book.sale=function(){
    this.saleNo++;
}
book.author={
    name:&quot;whqet&quot;,
    age:18
}
console.log(book.author.age);  //18
book.sale();
console.log(book.saleNo); //1
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>通过构造函数和原型-创建对象</h2>
<ul>
<li>通过构造函数和原型</li>
</ul>
<pre><code class="javascript">//通过构造函数和原型
var Book=function(name,category){
    this.name=name;
    this.category=category;
}
var book=new Book(&quot;javascript入门&quot;,&quot;fed&quot;);
console.log(book.category);  //fed
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>通过构造函数和原型-创建对象</h2>
<ul>
<li>通过构造函数和原型</li>
</ul>
<pre><code class="javascript">//通过构造函数和原型
var Book=function(name,category){
    this.name=name;
    this.category=category;
}
Book.prototype.sale=function(){
    console.log(&quot;sale a book&quot;);
}
var book=new Book(&quot;javascript入门&quot;,&quot;fed&quot;);
book.sale();
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>利用原型修改内置对象</h2>
<pre><code class="javascript">//利用原型的方式修改内置对象

var a=[1,2,3,4];
//修改了数组类
//慎重
Array.prototype.sum=function(){
    var sum=0;
    var arr=this;
    for (var i = 0; i &lt;arr.length; i++) {
        sum+=arr[i];
    }
    return sum;
}
console.log(a.sum());
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>shim和polyfill</h2>
<ul>
<li>shim<ul>
<li>shim是硬垫片</li>
<li>不一定符合标准</li>
<li>不同API封装成一种</li>
</ul>
</li>
<li>polyfill<ul>
<li>polyfill是软垫片，严格来讲是shim的一种</li>
<li>符合标准</li>
<li>让旧浏览器支持新特性</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>shim和polyfill</h2>
<h3><a href="https://github.com/xiaoruo/EventUtil/blob/master/EventUtil.js" target="_blank">EventUtil</a></h3>
<pre><code class="javascript">/**
 * @author [xiaoruo]
 * [EventUtil 跨浏览器事件对象]
 * @type {Object}
 */
var EventUtil = {
    /**
     * [addHandler 添加跨浏览器事件]
     * @param {[Object]} element [事件对象]
     * @param {[String]} type    [事件类型]
     * @param {[Function]} handler [事件函数]
     */
    addHandler: function(element, type, handler) {
        if (element.addEventListener) {
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent(&quot;on&quot; + type, handler);
        } else {
            element[&quot;on&quot; + type] = handler;
        }
    },

    /**
     * [removeHandler 移除事件]
     * @param {[Object]} element [事件对象]
     * @param {[String]} type    [事件类型]
     * @param {[Function]} handler [事件函数]
     */
    removeHandler: function(element, type, handler) {
        if (element.removeEventListener) {
            element.removeEventListener(type, handler, false);
        } else if (element.detachEvent) {
            element.detachEvent(&quot;on&quot; + type, handler);
        } else {
            element[&quot;on&quot; + type] = null;
        }
    },

    /**
     * [getEvent 跨浏览器事件]
     * @param  {[Object]} event [事件对象]
     * @return {[Object]}       [事件对象]
     */
    getEvent: function(event) {
        return event ? event : window.event;
    },

    /**
     * [getTarget 事件目标]
     * @param  {[Object]} event [事件对象]
     * @return {[Object]}       [事件目标]
     */
    getTarget: function(event) {
        return event.target || event.srcElement;
    },

    /**
     * [getRelatedTarget 与事件目标相关的节点]这个属性只对mouseover和mouseout有用（mouseover是离开的那个节点或mouseout时进入的那个节点）
     * @param  {[Object]} event [事件对象]
    * @return {[Object]}       [相关节点]
     */
    getRelatedTarget: function(event) {
        if (event.relatedTarget) {
            return event.relatedTarget;
        } else if (event.toElement) {
            return event.toElement;
        } else if (event.fromElement) {
            return event.fromElement;
        } else {
            return null;
        }

    },

    /**
     * [preventDefault 取消默认事件]
     * @param  {[Object]} event [事件对象]
     */
    preventDefault: function(event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    },

    /**
     * [stopPropagation 取消事件的冒泡或捕获行为]
     * @param  {[Object]} event [事件对象]
     */
    stopPropagation: function(event) {
        if (event.stopPropagation) {
            event.stopPropagation();
        } else {
            event.cancelBubble = true;
        }
    },


    /**
     * [getCharCode 获取键盘码]
     * @param  {[Object]} event [事件对象]
     * @return {[number]}       [键盘码]
     */
    getCharCode: function(event) {
        if (typeof event.charCode == &quot;number&quot;) {
            return event.charCode;
        } else {
            return event.keyCode;
        }
    },

    /**
     * [getButton 获取鼠标按键]
     * @param  {[Object]} event [事件对象]
     */
    getButton: function(event) {
        if (document.implementation.hasFeature(&quot;MouseEvents&quot;, &quot;2.0&quot;)) {
            return event.button;
        } else {
            switch (event.button) {
                case 0://没有按下按钮
                case 1://按下主鼠标按钮
                case 3://同时按下主次鼠标按钮
                case 5://同时按下主中间
                case 7://同时按下三个
                    return 0;//主
                case 2://按下了次鼠标按钮
                case 6://同时按下次中间
                    return 2;//中间
                case 4://按下鼠标中间按钮
                    return 1;//次
            }
        }
    },

    /**
     * [getWheelDelta 鼠标滚轮事件]
     * @param  {[Object]} event [事件对象]
     * @return {[Number]}       [鼠标滚轮数值]上滚为正下滚为负
     */
    getWheelDelta: function(event) {
        if (event.wheelDelta) {
            return (client.engine.opera &amp;&amp; client.engine.opera &lt; 9.5 ? -event.wheelDelta : event.wheelDelta);
        } else {
            return -event.detail * 40;
        }
    },


    /**
     * [getClipboardText 获取剪切板数据]
     * @param  {[Object]} event [事件对象]
     * @return {[String]}       [剪切板数据]
     */
    getClipboardText: function(event) {
        var clipboardData = (event.clipboardData || window.clipboardData);
        return clipboardData.getData(&quot;text&quot;);
    },


    /**
     * [setClipboardText 为剪切板赋予数据]
     * @param  {[Object]} event [事件对象]
     */
    setClipboardText: function(event, value) {
        if (event.clipboardData) {
            event.clipboardData.setData(&quot;text/plain&quot;, value);
        } else if (window.clipboardData) {
            window.clipboardData.setData(&quot;text&quot;, value);
        }
    }
};
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>shim和polyfill</h2>
<h3><a href="https://github.com/jonathantneal/EventListener" target="_blank">EventListener Polyfill for IE</a></h3>
<pre><code class="javascript">// EventListener | CC0 | github.com/jonathantneal/EventListener

this.Element &amp;&amp; Element.prototype.attachEvent &amp;&amp; !Element.prototype.addEventListener &amp;&amp; (function () {
    function addToPrototype(name, method) {
        Window.prototype[name] = HTMLDocument.prototype[name] = Element.prototype[name] = method;
    }

    // add
    addToPrototype(&quot;addEventListener&quot;, function (type, listener) {
        var
        target = this,
        listeners = target.addEventListener.listeners = target.addEventListener.listeners || {},
        typeListeners = listeners[type] = listeners[type] || [];

        // if no events exist, attach the listener
        if (!typeListeners.length) {
            target.attachEvent(&quot;on&quot; + type, typeListeners.event = function (event) {
                var documentElement = target.document &amp;&amp; target.document.documentElement || target.documentElement || { scrollLeft: 0, scrollTop: 0 };

                // polyfill w3c properties and methods
                event.currentTarget = target;
                event.pageX = event.clientX + documentElement.scrollLeft;
                event.pageY = event.clientY + documentElement.scrollTop;
                event.preventDefault = function () { event.returnValue = false };
                event.relatedTarget = event.fromElement || null;
                event.stopImmediatePropagation = function () { immediatePropagation = false; event.cancelBubble = true };
                event.stopPropagation = function () { event.cancelBubble = true };
                event.target = event.srcElement || target;
                event.timeStamp = +new Date;

                var plainEvt = {};
                for (var i in event) {
                    plainEvt[i] = event[i];
                }

                // create an cached list of the master events list (to protect this loop from breaking when an event is removed)
                for (var i = 0, typeListenersCache = [].concat(typeListeners), typeListenerCache, immediatePropagation = true; immediatePropagation &amp;&amp; (typeListenerCache = typeListenersCache[i]); ++i) {
                    // check to see if the cached event still exists in the master events list
                    for (var ii = 0, typeListener; typeListener = typeListeners[ii]; ++ii) {
                        if (typeListener == typeListenerCache) {
                            typeListener.call(target, plainEvt);

                            break;
                        }
                    }
                }
            });
        }

        // add the event to the master event list
        typeListeners.push(listener);
    });

    // remove
    addToPrototype(&quot;removeEventListener&quot;, function (type, listener) {
        var
        target = this,
        listeners = target.addEventListener.listeners = target.addEventListener.listeners || {},
        typeListeners = listeners[type] = listeners[type] || [];

        // remove the newest matching event from the master event list
        for (var i = typeListeners.length - 1, typeListener; typeListener = typeListeners[i]; --i) {
            if (typeListener == listener) {
                typeListeners.splice(i, 1);

                break;
            }
        }

        // if no events exist, detach the listener
        if (!typeListeners.length &amp;&amp; typeListeners.event) {
            target.detachEvent(&quot;on&quot; + type, typeListeners.event);
        }
    });

    // dispatch
    addToPrototype(&quot;dispatchEvent&quot;, function (eventObject) {
        var
        target = this,
        type = eventObject.type,
        listeners = target.addEventListener.listeners = target.addEventListener.listeners || {},
        typeListeners = listeners[type] = listeners[type] || [];

        try {
            return target.fireEvent(&quot;on&quot; + type, eventObject);
        } catch (error) {
            if (typeListeners.event) {
                typeListeners.event(eventObject);
            }

            return;
        }
    });

    // CustomEvent
    Object.defineProperty(Window.prototype, &quot;CustomEvent&quot;, {
        get: function () {
            var self = this;

            return function CustomEvent(type, eventInitDict) {
                var event = self.document.createEventObject(), key;

                event.type = type;
                for (key in eventInitDict) {
                    if (key == &#39;cancelable&#39;){
                        event.returnValue = !eventInitDict.cancelable;
                    } else if (key == &#39;bubbles&#39;){
                        event.cancelBubble = !eventInitDict.bubbles;
                    } else if (key == &#39;detail&#39;){
                        event.detail = eventInitDict.detail;
                    }
                }
                return event;
            };
        }
    });

    // ready
    function ready(event) {
        if (ready.interval &amp;&amp; document.body) {
            ready.interval = clearInterval(ready.interval);

            document.dispatchEvent(new CustomEvent(&quot;DOMContentLoaded&quot;));
        }
    }

    ready.interval = setInterval(ready, 1);

    window.addEventListener(&quot;load&quot;, ready);
})();

(!this.CustomEvent || typeof this.CustomEvent === &quot;object&quot;) &amp;&amp; (function() {
    // CustomEvent for browsers which don&#39;t natively support the Constructor method
    this.CustomEvent = function CustomEvent(type, eventInitDict) {
        var event;
        eventInitDict = eventInitDict || {bubbles: false, cancelable: false, detail: undefined};

        try {
            event = document.createEvent(&#39;CustomEvent&#39;);
            event.initCustomEvent(type, eventInitDict.bubbles, eventInitDict.cancelable, eventInitDict.detail);
        } catch (error) {
            // for browsers which don&#39;t support CustomEvent at all, we use a regular event instead
            event = document.createEvent(&#39;Event&#39;);
            event.initEvent(type, eventInitDict.bubbles, eventInitDict.cancelable);
            event.detail = eventInitDict.detail;
        }

        return event;
    };
})();
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>属性操作</h2>
<ul>
<li>删除属性<ul>
<li>delete只能删除自有属性，不能删除继承属性</li>
</ul>
</li>
<li>检测属性<ul>
<li>in运算符</li>
<li>hasOwnProperty()</li>
<li>propertyIsEnumrable()</li>
</ul>
</li>
<li>遍历属性<ul>
<li>for in遍历</li>
<li>Object.keys()</li>
<li>Object.getOwnPropertyNames()</li>
</ul>
</li>
</ul>
<pre><code class="javascript">//删除属性
var book=new Object();
book.name=&quot;javascript入门&quot;;
book.category=&quot;fed&quot;;
delete book.name;
console.log(book.name);  //undefined
//检测属性
console.log(&#39;category&#39; in book);
console.log(book.hasOwnProperty(&#39;category&#39;));
console.log(book.propertyIsEnumerable(&#39;category&#39;));
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>属性操作-遍历属性</h2>
<pre><code class="javascript">//遍历属性
var o={
    x:1,
    y:2,
    z:3
};
for(p in o){
    //跳过继承的属性
    if(!o.hasOwnProperty(p)) continue;
    //跳过方法
    if(typeof o[p]===&quot;function&quot;) continue;
    //输出属性和属性值
    console.log(p,o[p]);
}
//ES5的方式
//ES5的方式 Object.keys(）
console.log(Object.keys(o));
//ES5的方式 Object.getOwnPropertyNames()
console.log(Object.getOwnPropertyNames(o));
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>继承实现</h2>
<ul>
<li>直接继承prototype</li>
<li>拷贝继承</li>
</ul>
<pre><code class="javascript">//直接继承prototype

//Animal对象
function Animal(){ }
Animal.prototype.species = &quot;动物&quot;;
//将Cat的prototype对象指向Animal的prototype对象，完成继承
function Cat(){}
Cat.prototype = Animal.prototype;
Cat.prototype.constructor = Cat;
var cat1 = new Cat();
console.log(cat1.species); // 动物
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>继承实现</h2>
<ul>
<li>直接继承prototype</li>
<li>拷贝继承</li>
</ul>
<pre><code class="javascript">//拷贝继承

//Animal对象
function Animal(){ }
Animal.prototype.species = &quot;动物&quot;;
//写个函数，实现拷贝继承
function extend2(Child, Parent) {
    var p = Parent.prototype;
    var c = Child.prototype;
　　for (var i in p) {
　　　　c[i] = p[i];
　　}
　　c.uber = p;
}
function Cat(){}
extend2(Cat, Animal);
var cat1 = new Cat();
console.log(cat1.species); // 动物
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>交互开发</h1>
<h2>旨为前端开发工程师的前端开发课程</h2>
<p><small style="vertical-align:middle;display:inline-block"><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=star&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=follow&count=false" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="20" style="width:170px;height:20px;  background-color: transparent;"></iframe></small></p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'rollIn',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./style/01.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
