<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>面向对象编程 - By 交互开发课题组</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.colors.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>面向对象编程</h1>
<h2>演讲者：交互开发课题组</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>内容提纲</h2>
<ol>
<li>ES6实现</li>
<li>继承实现</li>
<li>案例练习</li>
</ol>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>ES6实现</h2>
<ul>
<li>参考资料<ul>
<li><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank">class的基本语法</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank">class的继承</a></li>
<li><a href="https://babeljs.cn/" target="_blank">babel官方网站</a></li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>ES6实现</h2>
<ul>
<li>生成实例对象的传统方式</li>
<li>ES6实现方式</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>ES6实现</h2>
<ul>
<li>生成实例对象的传统方式</li>
</ul>
<pre><code class="javascript">//生成实例对象的传统方式
function Point(x, y) {
  this.x = x;
  this.y = y;
}

Point.prototype.toString = function () {
  return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;;
};

var p = new Point(1, 2);
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>ES6实现</h2>
<ul>
<li>ES6实现方式</li>
</ul>
<pre><code class="javascript">//ES6实现方式
//定义类
class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  toString() {
    return &#39;(&#39; + this.x + &#39;, &#39; + this.y + &#39;)&#39;;
  }
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>通过构造函数和原型-创建对象</h2>
<ul>
<li>构造函数的prototype属性，在 ES6 的“类”上面继续存在。</li>
<li>类的所有方法都定义在类的prototype属性上面。</li>
</ul>
<pre><code class="javascript">class Point {
  constructor() {
    // ...
  }

  toString() {
    // ...
  }

  toValue() {
    // ...
  }
}

// 等同于
Point.prototype = {
  constructor() {},
  toString() {},
  toValue() {},
};
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>ES6实现</h2>
<ul>
<li>constructor 方法<ul>
<li>类的默认方法</li>
<li>通过new命令生成对象实例时，自动调用该方法</li>
<li>一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</li>
</ul>
</li>
</ul>
<pre><code class="javascript">class Point {
}

// 等同于
class Point {
  constructor() {}
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>Class 的静态方法</h2>
<ul>
<li>使用static关键字定义静态方法</li>
<li>静态方法包含this关键字，这个this指的是类，而不是实例。</li>
</ul>
<pre><code class="javascript">class Foo {
  static classMethod() {
    return &#39;hello&#39;;
  }
}

Foo.classMethod() // &#39;hello&#39;

var foo = new Foo();
foo.classMethod()
// TypeError: foo.classMethod is not a function
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>Class 的静态属性和实例属性</h2>
<ul>
<li>静态属性<ul>
<li>Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。</li>
</ul>
</li>
</ul>
<pre><code class="javascript">//静态属性
class Foo {
}
Foo.prop = 1;
Foo.prop // 1

//实例属性
//类的实例属性可以用等式，写入类的定义之中。
class MyClass {
  myProp = 42;

  constructor() {
    console.log(this.myProp); // 42
  }
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>继承实现</h2>
<ul>
<li>利用extends关键字实现</li>
<li>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。</li>
</ul>
<pre><code class="javascript">class Point {
}

class ColorPoint extends Point {
  constructor(x, y, color) {
    super(x, y); // 调用父类的constructor(x, y)
    this.color = color;
  }

  toString() {
    return this.color + &#39; &#39; + super.toString(); // 调用父类的toString()
  }
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2><a href="https://babeljs.cn/" target="_blank">babel</a></h2>
<ul>
<li>用于编写下一代javascript的编译器</li>
<li>即刻使用ES6语法<ul>
<li>使用在线支持</li>
<li>本地编译</li>
</ul>
</li>
</ul>
<pre><code class="javascript">&lt;!-- 加载 Babel --&gt;
&lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;
&lt;!-- 你的脚本代码 --&gt;
&lt;script type=&quot;text/babel&quot;&gt;
const getMessage = () =&gt; &quot;Hello World&quot;;
document.getElementById(&#39;output&#39;).innerHTML = getMessage();
&lt;/script&gt;
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>案例练习</h2>
<iframe src="./demos/editor.html?file=jsBase/snow" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vleft">

<h2>案例练习</h2>
<iframe src="./demos/editor.html?file=jsBase/snow2" style="height:400px;"></iframe>
</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>交互开发</h1>
<h2>旨为前端开发工程师的前端开发课程</h2>
<p><small style="vertical-align:middle;display:inline-block"><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=star&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=bestace&repo=fed&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20" style="width:110px;height:20px;  background-color: transparent;"></iframe><iframe src="///ghbtns.com/github-btn.html?user=zptcsoft&repo=zptcsoft.github.io&type=follow&count=false" allowtransparency="true" frameborder="0" scrolling="0" width="170" height="20" style="width:170px;height:20px;  background-color: transparent;"></iframe></small></p>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'rollIn',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./style/01.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
